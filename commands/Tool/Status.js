const { EmbedBuilder } = require("discord.js")
const prettyBytes = require("pretty-bytes");
const moment = require("moment");
const errorReply = new EmbedBuilder();
require("moment-duration-format");

    /**
     * 
     * @param {import("discord.js").Client} client 
     * @param {import("discord.js").Interaction} interaction
     */

     module.exports = {
        data: {
            name: "‡∏™‡πÄ‡∏ï‡∏ï‡∏±‡∏™",
            description: "‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏∞‡∏ö‡∏ö Status-System",
            options: [
                {
                    name: "type",
                    type: 3,
                    description: "Player & Node Status",
                    choices: [
                        {
                            name: 'Player', value: 'player'
                        },
                        {
                            name: 'Player-Dev', value: 'playerdev'
                        },
                        {
                            name: 'Node', value: 'node'
                        }
                    ],
                    required: true
                }
            ]
        }, 

        run: async (client, interaction) => {

    try {

            const pingfunction = interaction.options.getString("type")

        if(pingfunction === 'player') {

                let player = client.manager.players.get(interaction.guild.id)

                const channel = interaction.member.voice?.channel;

            if (!channel) {
                return interaction.reply({
                    embeds: [new EmbedBuilder()
                        .setColor("Red")
                        .setFooter({ text: client.user.username + " | Version " + client.config.version, iconURL: client.user.displayAvatarURL() })
                        .setTitle(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡πç‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ`)
                    ], ephemeral: false
                });
            }

            if (!player) return interaction.reply({
                embeds: [new EmbedBuilder()
                    .setColor('Red')
                    .setFooter({ text: client.user.username + " | Version " + client.config.version, iconURL: client.user.displayAvatarURL() })
                    .setTitle(`${client.user.username} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`)
                ], ephemeral: false
            });

                await interaction.reply({
                    embeds: [new EmbedBuilder()
                        .setAuthor({ name: `${client.user.username}`, iconURL: client.user.displayAvatarURL() })
                        .setDescription('**__Player Status__**')
                        .setColor('White')
                        .addFields(
                            {
                                name: `${interaction.guild.name} [ <#${player.voiceChannel}> ]`,
                                value: `\`\`\`css\nPing Player: ${player.wsPing} ms\nPlayer Region: ${channel?.rtcRegion || undefined}\nPlayer Connected: ${player.connected}\`\`\``,
                                inline: true,
                            }
                        )
                    ]
                })

        } else if(pingfunction === 'playerdev') {

            if (interaction.user.id !== '876524312344014890')
            return interaction.reply({
                embeds: [new EmbedBuilder()
                    .setColor("Red")
                    .setFooter({ text: client.user.username + " | Version " + client.config.version, iconURL: client.user.displayAvatarURL() })
                    .setTitle(`‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡πç‡∏≤‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ!`)
                ], ephemeral: false
            });

            const RTA_PlayerDev = client.manager.players.map((player) => {

            const guild = client.guilds.cache.get(player.guild)

                return {
                            name: `${guild.name}`,
                            value: `\`\`\`css\nPing Player: ${player.wsPing} ms\nPlayer Region: ${player?.region || undefined}\nPlayer Connected: ${player.connected}\`\`\``,
                            inline: true,
                        }
                    })

            await interaction.reply({
                embeds: [new EmbedBuilder()
                    .setAuthor({ name: `${client.user.username}`, iconURL: client.user.displayAvatarURL() })
                    .setDescription('**__All Player Status__**')
                    .setColor('White')
                    .addFields(RTA_PlayerDev)
                ]
            })
        } else if(pingfunction === 'node') {

            const RTA_Node = client.manager.nodes.map((node) => {
                return {
                            name: `${node.connected ? "üü¢" : "üî¥"} ${node.options.identifier}`,
                            value: `\`\`\`css\n‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡∏ã‡∏µ‡∏û‡∏µ‡∏¢‡∏π: ${(Math.round(node.stats.cpu.systemLoad * 100) / 100).toFixed(2)}%\n‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ${node.stats.players} ‡∏´‡πâ‡∏≠‡∏á\n‡∏Å‡πç‡∏≤‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: ${node.stats.playingPlayers} ‡∏´‡πâ‡∏≠‡∏á\n‡πÄ‡πÄ‡∏£‡∏°‡∏Å‡πç‡∏≤‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${prettyBytes(node.stats.memory.used)}\n‡πÄ‡πÄ‡∏£‡∏°‡∏•‡∏¥‡∏°‡∏¥‡∏ï: ${prettyBytes(node.stats.memory.reservable)}\nUptime: ${moment.duration(node.stats.uptime).format(" d[d] h[h] m[m] ")}\`\`\``,
                            inline: true,
                        }
                    })
                    
            await interaction.reply({
                embeds: [new EmbedBuilder()
                    .setAuthor({ name: `${client.user.username}`, iconURL: client.user.displayAvatarURL() })
                    .setDescription('**__Node Status__**')
                    .setColor('White')
                    .addFields(RTA_Node)
                ]
            })
        }

        } catch (e) {
            console.log(e)
            client.logger.danger(e)
            errorReply.setColor('Red').setDescription('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡πç‡∏≤‡∏™‡∏±‡πà‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡πç‡∏≤‡∏™‡∏±‡πà‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
            return interaction.reply({ embeds: [errorReply],  ephemeral: true });
        }
    }
}
